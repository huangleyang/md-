jQuery
有什么用
简化js代码
清除兼容性问题等（直接写方法就可以用了）


DOM中的顶级对象：document--页面中的顶级对象
document点出来的是DOM中的属性和方法
BOM中的顶级对象：window---浏览器中的顶级对象
window点出来的是浏览器中的属性和方法
jQuery的顶级对象：jQuery---$
jQuery点出来的是$方法


入口函数的标准 （等待页面加载完毕后的一个事件）
$(document).ready(function(){
})
调用id时用$("#id名")；
调用class时用 $(".类名")
直接调用时$("需要调用的名称")；
语法 调用div $("div")
注册绑定事件时不加on直接些事件
语法$(btn1.click())


开发时 有三个环境
第一个开发环境 写代码（公司配的电脑）
第二测试环境 服务器：（测bug的）
第三个生产环境 服务器：对用户开放的

git svn 上传的数据库


jQuery的入口函数会等页面加载完毕 但不会等图片加载完毕 就执行
语法：$(function(){})
js的入口函数会等待页面加载完毕（所有元素），并且会等待图片加载完毕才执行
语法：window.onload = function(){}

js的入口函数比jQuery的入口函数执行的要慢

DOM对象转化为jq对象
dom对象是已经在dom中声明了时
语法：$(dom对象)   直接$() 前提是必须调用了jq数据库
jq转化为DOM对象
如果btn在 是已经在dom中声明了时
语法：$(btnObj).get(0)或者$(btnObj)[0]；是dom一般的格式
为声明的时候
语法：$("#btn")[0]或 $("#btnObj").get(0)括号里面就是jq一般的格式


.text();如果小括号中写内容，就是设置文字的内容
语法：$("id选择器，类选择器，标签选择器").text("文字")
如果.text；小括号里面什么都不写，表示的是获取这个元素中的内容
语法：console.log($(#div).text())获取id为div的内容

所用的方法
.text()方法 ，设置标签中间现实的文本的内容，类似于innerText 
.text()方法 如果写标签会当成普通文本来处理
.html（）方法，设置标签中间的显示其他标签标签内容，类似于innerHTML
.val()设置input标签中的value的值，类似于value
.css()方法，设置元素的样式，类似于style


.css；方法，该方法如果只是设置一个样式的属性和值，那么这个方法写两个参数，第一个是属性，第二个是值


获取一个id为div里面的所有元素
$("div *")
运用this时不用加双引号
语法 ：$(this)


获取索引为4是标签的元素
 jq的对象：eq（4）口号里面是索引
获取索引大于4 的标签元素
  jq的对象：gt（4） 
获取索引小于4 的标签元素
  jq的对象：lt（4） 


siblings() 兄弟元素
语法：$("#center>li:eq("+index+")").siblings("li").hide();


opacity 透明度
语法：（"opacity",1）
$().fing（）方法：是针对当前元素的元素找里面的一些其他的元素


隔行变色
even  偶数 （用的索引所以第一行是even）


 $("#uu>li:even")
odd   奇数（用的索引所以第二行是odd）
获取表单元素
要用
:text
:input
:checkbox 复选框
 $("#uu>li:even")
 $("#uu>li:odd")
：first 第一个    索引
：last 最后一个   索引

层级选择器
后代选择器$("父元素 后代元素")
弟弟选择器 + 紧邻的写一个同级元素
弟弟妹妹选择器 ~


设置多样式可以使用
.css({"属性"："样式"，"属性"："样式"，"属性"："样式"})


addClass方法：添加一个内样式
在addClass方法中的类样式的名字前面不加点
addClass添加样式的时候，多个类样式中间用空格隔开
removeClass（）移除类样式
括号里面什么都不写就是清楚全部的类样式
判断有没有类样式.hasClass（"类名"）


链式编程
当使用的是统一对象时可以无限的循环使用
事件方法也可以使用


.text（）是获取下一个兄弟元素的方法
.textALL（）是获取当前元素后面所有的兄弟元素
.prev()是获取前一个兄弟元素的方法
.prevALL（）是获取当前元素前面所有的兄弟元素
siblings() 获取的是当前元素（除自己之外的）兄弟元素
语法：$("#center>li:eq("+index+")").siblings("li").hide();


断链；对象的调用方法，返回的不是当前的对象，在调用方法，调用不了
解决断链回复到断链之前的一个效果
.end()方法回复到断链之前的效果


显示或隐藏
.show()显示 里面可以写1.数字（单位毫秒） 2. 字符串（slow，normal，fast）
两个方法有第二个参数的
语法.show(1000,function(){}) 回调函数 当显示结束后执行这个匿名函数


递归
arguments.callee引用函数自身。

方法
.slideUp（） 滑入 可以写参数 时间单位毫秒
.slideDown（）滑出
.slidetoggle（）切换
.fadeIn （）淡入
.fadeOut （）淡出
.fadeToggle （）切换
.fadeTo （100,0.3）透明度  有两个参数一个是时间 一个是需要的透明度
.stop()停止用来动画

animate（）动画效果 只能变化数值类型的 
不是数值的不可以例如：颜色
1.是键值对 --对象 必须写
2.时间 1000毫秒 必须写
3.可以有匿名函数---回调函数 可写可不写


创建元素
 第一种方法
var aObj=$("<a href='http://www.baidu.com'>百度"+i+"</a>");
重点（创建超链接时 链接的得用和外部不一样的引号）

添加元素
元素对象.append()添加进入这个元素的最后面（子元素）；
append（） 如果是页面上已存在的元素是剪切的效果
子元素.appendTo(父元素) 把子元素添加到父元素中
元素对象.prepend()添加进入这个元素的最前面（子元素）；
prepend  如果是页面上已存在的元素是剪切的效果
元素对象.after()添加到这个元素的后面（兄弟元素）；
元素对象.before()添加进入这个元素的前面（兄弟元素）；
remove() 删除所找到的元素


第二种方法
$("#dv").html("<p>这是一个p标签</p>")


属性操作
attr方法 用法与css一样 设置自定义的属性 不能设置一些动态的属性
可以写两个参数：1参数：2属性值
只写一个参数，获取该元素的属性的值
prop根据事件对象中是否调用过  只能设置自身已有的属性
event.stopImmediatePropagation() 方法来返回一个布尔值。
1 如果操作自定义属性， 使用attr
2如果操作自身属性 使用prop
3如果操作一些动态的属性用prop



获得焦点focus
失去焦点blur


需要获取页面可是区域的宽高
$(window). (function(){
console.log($(window).width());
console.log($(window).height())
})
也可以直接设置某元素的宽高
$("元素").width(400)

.width() //获取的就是width
.innerWidth() //获取的是padding+width
.outerWidth()//获取的是padding+width+border;
.outerWidth(true)//获取的是padding+width+border+margin;
height同理




scrollTop 卷去内容的高度
scrollleft 卷去内容的宽度

获取元素的相对于document（body）的位置
.offset()
获取元素相对与定位父元素的位置
.position();


注册事件 先注册事件 直接绑定注册事件
注册简单事件 ：缺点：一次只能注册一个事件


delegate：代理，委托
给一个元素注册一个委托事件，但最终执不执行 是由注册的时间决定的
$(元素).delegate("p","click",function(){})
第一个参数：事情最终由谁来执行的
第二参数：时间的类型
第三参数：函数 ，要干嘛


.html("") 清空元素的内容
.empty("")清空元素的内容
.remove() 移出元素自身
.clone()克隆的方法


获取文本域终的内容
.text() 和 .val 推荐使用后一种 （因为这是文本域自身的属性）
val属性也可以使下拉框中的某一项选中


on方法 两个参数；1事件的名字 2 事件处理函数
用方法 三个参数  1事件的名字 2要绑定事件的元素 3 事件处理函数
如果uansu时动态创建的，那么非常推荐用on的方式为动态添加到元素绑定事件
解绑事件 运用off
两个参数的时候
需要解绑的元素.off(事件)
三个参数时候
绑定的父元素.off(事件，解除绑定的元素)


bind绑定事件 
bind（事件，函数） 
unbind 解除绑定事件
需要解绑的元素.unbind(事件)



delegate：代理，委托绑定事件
undelegate解绑事件
需要解绑的父元素.off( 需要解绑的元素，事件)


如果说父级元素和子级元素都是通过正常的方式绑定事件，如果通过off解绑的时候，父级元素解绑了，子级元素没有解绑 （on ， bind）
但是如果自己元素的是通过父级元素调用的delegate的方式绑定的事件，父级元素使用off方式绑定事件，这个时候父级元素和子集元素的相同的事件背被解绑$("#dv").off("click","**") 清除子集元素的事件
$("#dv").off() 移除父级元素和子集元素的所有绑定事件


三种触发事件 的方法
触发时间 的$(元素).事件();语法 .click（）
 .trigger(事件)
.triggerHandler（事件）
 三种方法中 第一种和第二种是一样的，都会触发浏览器默认的事件
例如focus 光标会在文本框中闪烁
第三种 不会触发浏览器默认的事件
例如focus 光标会在文本框中不闪烁


为当前执行的 function 对象返回一个arguments 对象


event.delegateTarget 代码绑定事件的对象 （最前面的绑定的对象）
event.currentTarget 绑定事件的对象 	（真正的绑定的对象）
event.target 真正触发事件的对象	（触发的对象）


事件冒泡 元素中有元素，这些元素都有相同的事件，一旦最里面的元素的事件被触发，外面的所有元素的相同事件也会被触发
取消事件冒泡 ：在最里面的元素 return false
 return false还可以取消浏览器的默认事件 比如超链接的跳转


链式编程
只要在这个函数里面返回这个的对象（return this）就可以继续链式编程


隐式迭代
each（）方法 得到 会有两个参数 第一个是索引值 第二个是元素


多库共存 
让jq对$对象进行释放控制权
var xx = $.noConflict()  把$付给了xx