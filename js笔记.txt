操作符：
    算数运算符：+ - * / %
    算术表达式：由算术运算符连接起来的表达式
    一元运算符：这个操作符只需要一个操作数就可以运算的符号   ++  --
    二元运算符：这个操作符需要两个操作数就可以运算
    三元运算符：表达式1？ 表达式2 : 表达式3 ;     a > 18 ?  a = b : a = c;
    复合运算符：+=  -=  *=  /=  %=
    复合运算表达式：由复合运算符连接起来的表达式
    关系/比较运算符：>  <   >+   <=   ==(只比较内容，不比较类型，自动进行隐式转换)  
	               ===    ！=   ！==
    逻辑运算符：&&与  ||或   ！非    连接两个表达式
    优先级：1. ( )
	 2.一元运算符： ++ -- ！   ++num：前加    num++：后加
	 3.算数运算符：先* / % 后 + -
	 4.关系运算符：>  >=  <  <=
	 5.相等运算符： ==  ！=  ===  ！==
	 6.逻辑运算符： 先&&  后 ||
	 7.赋值运算符：=  +=  -=

数据类型及操作：
     number   string   null   boolean  undefined   object

    var i=111
    alert(typeof i);判断i是什么类型



字符类型转换：
    其他类型转字符串：
      num1.toString(); 被动调用   只能转有意义的变量   如null undefined不行，直接报错
      String(num1); 主动转换

    转换为布尔值：
       var a = ""
                   ""  0  null  NaN  undefined : false  其余为true
       Boolean(a);
    
  数据类型转换：
     显式类型转换：
       var a='100'
       Number(a)  将字符串类型a转换成数字类型a  只能有数字  
       Number(undefined)   返回NaN
       parseInt(a); 解析成整数 只能转换成字符串类型，从左往右直至遇到非数字  
		转换失败为NaN
       parseFloat(a); 解析成整数，带小数
       parseInt(a,10);按十进制转换 (a,8);按八进制转换  (a,2);按二进制转换  (a,16);按十六进制转换
     隐式类型转换：  隐式转换转换成数字是用函数Number()进行转换
         +         变成字符串  
         - * / % ++ --   变成数字
         > <       数字与字符串按数字比；字符串与字符串按编码比
         !         把右边的数据类型转换成布尔值
         ==        比较两边的值
         === 全等  先比较两边的类型再判断值

NaN:
    运算无法返回正确的数值时，就会返回“NaN”值；表示一个无法表示的值，以至于NaN都不等于他自己
    表示的是一种运算结果
isNaN();
    判断结果是否为NaN
    isNaN(undefined)    true   先用Number()进行强制转换再判断；如果转换成功，则不输出NaN，失败则输出NaN，再进行判断
    isNaN(null)    false
    isNaN('')        false
    isNaN('123')   false
    isNaN(123)     false
    isNaN(false)   false