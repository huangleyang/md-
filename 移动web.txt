一:网页布局方式
	1.固定宽度布局，为网页设置一个固定的宽度，通常用px作为单位，常用于PC端网页。
	2.流式布局：为网页设置一个相对的宽度，通常以百分比作为长度单位
	3.栅格化布局：将网页宽度人为的划为均等的长度，然后排版布局时以这些均等的长度作为度量单位 ，通常利用百分比作为长度单位划分为均等的长度
	4.响应是布局：通过检测设备信息，决定网页布局方式，即用户如果采用不同的设备备份访问同一个网页，有可能看到不一样的内容，一般情况下是检测设备屏幕的宽度来实现

	【重点】需要使用bootstrap必须得引用公共样式内容 
		在bootstrap主页的样式 
		只要引用bootstrap就必须得引用这个公共样式  
		通用的只要写一个其余的都可以直接嵌套进入使用 
	bootstrap中的栅格系统就是来描述当前子元素在指定屏幕下占据当前屏幕 12等份中的n(1-12)等份
	在bootstrap中使用栅格
		1.先添加容器container/container-fluid
		2.在容器中添加row --行
		3.在row中添加子元素，设置栅格样式
		4.在子元素中添加具体的内容

		w<768px 12等份
		w<768~992 6等分
		w<992~1200 4等分
		w>1200 3等分
实例是  
 <div class="row">
        <div class="col-xs-12 col-sm-6 col-md-4 col-lg-3"></div>
        <div class="col-xs-12 col-sm-6 col-md-4 col-lg-3"></div>
        <div class="col-xs-12 col-sm-6 col-md-4 col-lg-3"></div>
        <div class="col-xs-12 col-sm-6 col-md-4 col-lg-3"></div>
 </div>



移动Web
	PPI像素密度越高分辨率越高(和屏幕大小无关事)
	结论：屏幕尺寸固定时，当PPI越大，像素的实际大小就会越小 当PPI像素实际大小就越大

	设备独立像素 在ios设备上叫PT 举例说明就是iPhone 3G（PPI为163）1dp = 1px，iPhone 4（PPI为326）1dp = 2px

	css像素指的是通过css进行网页布局用到的单位 但是缩放时可以改变 相对的
	物理像素就是绝对的 

	远程调试
		必须链接统一网络
		需要装环境ghostlab等

	视口
		pc端视口大小就是屏幕可视区域的大小
		获取视口let clientWidth = document.documentElement.clientwidth
let clientHeight =document.documentElement.clientHeight


	移动端的 layout viewport(布局视口)指的是我们可以进行网页布局的大小 同样是用css像素来做计量单位 移动设备会默认设置一个较大的viewport(IOS为980px)

	ideal viewport （理想视口）设备区域屏幕
	

	因为移动端默认的宽度是980px 比真正的手机屏幕要大 我们想要把默认宽度设置为手机的宽度可以使用 <meta name="viewport" content="width=device-width, initial-scale=1">
	device-width是理性视口的宽度 
	设置initial-scale=1 和设置device-width效果是一样的 因为initial-scale=ideal viewport/layout viewport 意思就是将layout viewport 设置为ideal viewport 为了兼容两种都会写

	mate标签建议写在已有mate标签之后
	name="viewport" 说明mate标签是设置viewport的属性的这个只能在移动端设置才会有效
	content="width=320"不需要写单位 进行设置viewport 
	maximun-scale:设置最大的缩放比例
	minimun-scale：设置默认状态下最小的缩放比例
	uesr-scalable：设置是否允许用户进行缩放 yes/no
	避免缩放的时候有滚动条 不要设置width为具体的值 设置为100%即可


	去除移动端的特有的点击高亮效果
	-webkit-tap-highlight-color:transparent

	input {out:none;border:none;border:1px solid #ccc}

	当屏幕发生变化时的时候 onresize事件

			触屏事件
	事件类型
	touchstart:手指触屏时触发
	touchmove 手指在屏幕上移动时
	touchend 手指离开屏幕时触发
	touchcancel 触摸意外中断事件

		touchevent 对象
	touches 位于屏幕上的所有手指的列表
	targetTouches位于该元素上的所有手指的列表
	changedTouches ：touchstart时包含刚与触摸屏接触的触点，touchend时包含离开触摸屏的触点
	targetTouches和touches 在测试中没有区别
	细节 touch事件的触发，必须保证元素有具体的宽高，如果宽高为0.则不会进行触发

	手指坐标值
	screenX/screenY:是手指的触摸点相对于屏幕左上角的坐标
	clientX/clientY:相对于当前视口-移动端屏幕
	pageX、pageY：相对于页面的内容-会有滚动条--包含滚动的


	webkitTransitionEnd:可以监听当前元素的过渡效果执行完毕，当一个元素的过渡效果执行完毕的时候触发这个事件

	zepto 
	tap 元素tap的时候触发
	longTap 当一个元素被按住超过750ms触发
	singleTap and doubleTap 这一对事件可以用来检测元素上的单击和双击
	swipe swipeLeft swipeRight swipeUp swipeDown 当元素被划过时触发 （可选择滑动方向）


	在移动端，PC端的click等事件会有延迟，因为移动设备去判断用户是进行单击操作还是双击操作所以在用户第一次单击之后，会延迟300ms来执行，以便观察来判断用来视口需要执行双击操作 现在用touch事件来模拟


	callback && callback() 的意思就是，如果第一值callback不存在（false），直接返回false，如果第一个值存在，则运行第二个值 callback()


	1.在移动端tap事件是有点透问题的
	什么是点透 当点击上层区域是相同位置下层如果有点击事件 他也会触发
	2.touch事件只有在移动端才能使用，在pc无效

	需求
	1.在pc和移动端都能响应--click
	2.不能点透--click
	3.操作不能有延迟--touch    click--是有延迟的

	这里引用一个插件(fastclick)解决click的延迟问题
	使用fastclick
	if('addeventListener'in document) {
document.addEventListenter('DOMConttentLoaded',function(){FastClick.attach(document.body)},false)
}


	响应式布局の
	@media screen and (max-width:992px) and （maxu-width:1200px） {
body{}background-color ： red}}
	当判断最小值的，并且从小到大进行判断啊
	2，向上兼容： 如果设置了宽度更小时的样式，默认这些样式也会传递到宽度更大的范围
	3.向下覆盖 宽度更大的的样式会将前面的宽度更小样式进行覆盖
	
	书写建议
	1.如果是判断最小值，那么就应该从小到大写 boostrap就是判断最小值 然后从小到大写
	2.如果是判断最大值，那么就应该从大到小写

	min-width 在pc端和移动端都可以用
	min-device-width 只能在移动端使用  device设备 意思是在设备上使用

	通过媒体查询根据不同的条件调用不同的样式
<link rel = "stylesheet" href ="a.css">
<link rel = "stylesheet" media = "screen and (min-width:992px) and (max-width:1200px)" href ="b.css">

	列排序
	push(往后-右推)/pull(往前-左拉)  它是通过定位来实现的，所以不会影响其它元素， 但是有可能和其它元素重叠
例子<div class="col-xs-1 col-xs-push-2">2</div>

	offset:偏移  偏移的距离是以栅格做为单位  但是这种偏移会直接影响后面的元素， 有可能造成后面的元素换行显示  因为它是通过margin-left属性来实现的
<div class="col-xs-1 col-xs-offset-2">2</div>

	列嵌套

	微金所
	hidden-xs 小于768px时隐藏
	hidden-sm 小于992px时隐藏
	
	在jq中
	width()：它只能得到当前元素的内容的宽度
	innerWidth()它能获取当前元素的内容的宽度+paddding
	outerWidth() 获取当前元素的宽度+padding+border
	outerWidth(true) 获取元素的内容的宽度+padding+border+margin

	em是一种长度单位	，他是参照当前元素的字号，如果没有设置，就参照父容器或者当前浏览器的默认只好
	rem 根元素(浏览器)的字号